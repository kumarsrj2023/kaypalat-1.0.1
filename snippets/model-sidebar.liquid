<!-- Sidebar -->
<aside
  x-data="sidebar()"
  :class="$store.app.sidebar ? 'w-96' : 'w-0'"
  class="fixed top-0 right-0 bg-white h-screen transition-all duration-300 flex flex-col text-md font-semibold z-50 overflow-y-auto"
>
  <!-- Toggle button -->
  <button
    @click="$store.app.sidebar = false"
    class="absolute right-3 top-3 cursor-pointer rounded-full bg-gray-200 p-1"
  >
    {% render 'icon-close' %}
  </button>

  <!-- Sidebar main content -->
  <div class="mt-auto h-full py-4 px-5 text-gray-900 rounded-lg shadow-sm" x-cloak>
    <div class="mb-6">
      <span class="text-base font-semibold">Your Cart (<span x-text="cartItems.length"></span>)</span>
    </div>

    <template x-for="(item, index) in cartItems" :key="item.id">
      <div class="flex w-full gap-3 mb-4">
        <div class="h-28 w-24 text-center">
          <img :src="item.image" class="w-full h-full object-cover">
        </div>
        <div class="w-full">
          <!-- Title -->
          <h2 class="text-base font-normal mb-3" x-text="item.title"></h2>
          
          <!-- Total Price -->
          <div class="mb-2">
            <div x-show="isLoading(item.id)" class="loader w-6 h-6">
              <img class="w-full h-full" src="{{ 'loader.svg' | 'asset_url' }}" width="" height="">
            </div>
            <span x-show="!isLoading(item.id)" class="text-base font-semibold" x-text="'Rs. ' + formatPrice(item.price * item.quantity)"></span>
          </div>

          <!-- Quantity -->
          <div class="flex w-full justify-between items-center mb-4 gap-3">
            <div class="flex items-center shadow border border-gray-100">
              <span
                @click.debounce="item.quantity > 1 ? updateQuantity(item.id, item.quantity - 1) : item.quantity"
                class="cursor-pointer text-xl flex justify-center items-center w-10 h-10"
              >-</span>
              <input
                disabled
                class="text-lg flex justify-center items-center text-center w-10 h-10 border-l border-gray-100 border-r"
                :value="item.quantity"
              >
              <span
                @click="updateQuantity(item.id, item.quantity + 1)"
                class="cursor-pointer text-lg flex justify-center items-center w-10 h-10"
              >+</span>
            </div>

            <div class="transition-all duration-700">
              <span
                @click="removeItem(item.id)"
                class="w-4 h-4 hover:text-custom-skyblue cursor-pointer"
              >
                {% render 'icon-trash' %}
              </span>
            </div>
          </div>
        </div>
      </div>
    </template>
  </div>
</aside>
<!-- Sidebar -->

<script>
  window.addEventListener('alpine:init', function () {
    Alpine.data('sidebar', () => ({
      cartItems: [],
      loadingItems: new Set(), // Set to track loading states

      init() {
        window.addEventListener('refresh-cart', () => {
          this.fetchCartData();
        });
      },

      fetchCartData() {
        fetch('/cart.js', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
          },
        })
        .then(response => {
          if (!response.ok) {
            console.error(`HTTP error! status: ${response.status}`);
            throw new Error(`Bad request: status ${response.status}`);
          }
          return response.json();
        })
        .then(data => {
          this.cartItems = data.items;
        })
        .catch(error => {
          console.error('Error fetching cart data:', error);
        });
      },

      formatPrice(priceInCents) {
        return (priceInCents / 100).toFixed(2);
      },

      updateQuantity(itemId, newQuantity) {
        this.loadingItems.add(itemId); // Add item to loading set

        fetch('/cart/change.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
          },
          body: JSON.stringify({
            id: String(itemId),
            quantity: newQuantity,
          }),
        })
        .then(response => {
          if (!response.ok) {
            console.error(`HTTP error! status: ${response.status}`);
            throw new Error(`Bad request: status ${response.status}`);
          }
          return response.json();
        })
        .then(data => {
          this.cartItems = data.items;
          this.loadingItems.delete(itemId); // Remove item from loading set
          document.querySelector(".cart-count").innerHTML = data.item_count;
        })
        .catch(error => {
          console.error('Error updating quantity:', error);
          this.loadingItems.delete(itemId); // Remove item from loading set
        });
      },

      removeItem(itemId) {
        this.updateQuantity(itemId, 0);
      },

      isLoading(itemId) {
        return this.loadingItems.has(itemId); // Check if item is loading
      }
    }));
  });
</script>
